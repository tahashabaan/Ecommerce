{"ast":null,"code":"var _jsxFileName = \"X:\\\\kalBanan\\\\udemy\\\\projects\\\\ORDER__FOOD__PROJECT\\\\secon times\\\\src\\\\store\\\\CartProvider.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useReducer } from 'react';\nimport CartContext from './cart-context';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst cartValue = {\n  items: [],\n  totalAmount: 0\n};\n\nconst cartReducer = (state, action) => {\n  if (action.type === 'ADD') {\n    const existingCartItemIndex = state.items.findindex(item => item.id === action.payload.id);\n    const existingCartItem = state.items[existingCartItemIndex];\n    const updataTotalAmount = state.totalAmount + action.payload.amount * action.payload.price;\n    let updatesItem;\n\n    if (existingCartItem) {\n      let updateItem = { ...existingCartItem,\n        amount: existingCartItem.amount + action.payload.amount\n      };\n      updatesItem = [...state.items];\n      updatesItem[existingCartItemIndex] = updateItem;\n    } else {\n      updatesItem.concat(action.payload);\n    }\n\n    return {\n      items: updatesItem\n    };\n  }\n\n  if (action.type === 'Remove') {}\n\n  return {\n    cartValue\n  };\n};\n\nconst CartProvider = props => {\n  _s();\n\n  const [showCart, setShowCart] = useState(false);\n  const [stateCart, dispatcCart] = useReducer(cartReducer, cartValue);\n\n  const onAddItemToCartHandler = items => {\n    dispatcCart({\n      type: 'ADD',\n      payload: items\n    });\n  };\n\n  const onRemoveItemToCartHandler = id => {\n    dispatcCart({\n      type: 'Remove',\n      id: id\n    });\n  };\n\n  const onShowCartHandler = () => {\n    setShowCart(true);\n  };\n\n  const onHideCartHandler = () => {\n    setShowCart(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: {},\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 10\n  }, this);\n};\n\n_s(CartProvider, \"ZnqeH5twkLyTeMbJ6dhQEfA60XE=\");\n\n_c = CartProvider;\nexport default CartProvider; // const cartValue = {\n//   items:[],\n//   totalAmount:0\n// }\n// const cartReducer = ( state, action ) => {\n//   if ( action.type === 'ADD' ) {\n//     const updataTotalAmount = state.totalAmount + action.item.price * action.item.amount;\n//     const existingCartItemIndex = state.items.findIndex( item => item.id === action.item.id )\n//     const existingCartItem = state.items[existingCartItemIndex]\n//     let updateItems;\n//     if(existingCartItem){\n//       const updateItem ={\n//         ...existingCartItem,\n//         amount: existingCartItem.amount + action.item.amount\n//       }\n//       updateItems = [...state.items];\n//       updateItems[existingCartItemIndex] = updateItem\n//     } \n//     else{\n//       updateItems = state.items.concat(action.item)\n//     }\n//   return {\n//     items: updateItems,\n//     totalAmount: updataTotalAmount\n//   };\n//   }\n//   if ( action.type === 'REMOVE' ) {\n//     const existingCartItemIndex = state.items.findIndex(item => item.id === action.id)\n//     const existingCartItem = state.items[existingCartItemIndex];\n//     const updataTotalAmount = state.totalAmount - existingCartItem.price ;\n//     let updateItems;\n//     if ( existingCartItem.amount === 1 ) {\n//       updateItems = state.items.filter( item => item.id !== action.id )\n//     }\n//     else{\n//       const updateItem = {\n//         ...existingCartItem,\n//         amount:existingCartItem.amount-1\n//       }\n//       updateItems = [...state.items];\n//       updateItems[existingCartItemIndex] = updateItem\n//     }\n//     return {\n//       totalAmount:updataTotalAmount,\n//       items:updateItems\n//     }\n//   }\n//   return {cartValue}\n// }\n// const CartProvider = (props) => {\n//    const [showCart, setShowCart] = useState(false);\n//    const [cartState, dispatchCart] = useReducer(cartReducer, cartValue)\n//    const addItemToCartHandler = (items) => {\n//      dispatchCart({type:'ADD', item:items});\n//   }\n//   const removeItemToCartHandler = (id) => {\n//      dispatchCart({type: 'REMOVE', id:id})\n//  }\n//   const onShowCartHandler = () => {\n//     setShowCart(true)\n//   }\n//   const onHideCartHandler = () => {\n//     setShowCart(false)\n//   }\n//   return <CartContext.Provider value={{\n//    cartItem: cartState.items,\n//    totalAmount: cartState.totalAmount,\n//    showCart: showCart,\n//    onAddItem: addItemToCartHandler,\n//    onRemoveItem: removeItemToCartHandler,\n//    onShowCart: onShowCartHandler,\n//    onHideCart: onHideCartHandler,\n//   }}>\n//    {props.children}\n//   </CartContext.Provider> }\n// export default CartProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["useState","useReducer","CartContext","cartValue","items","totalAmount","cartReducer","state","action","type","existingCartItemIndex","findindex","item","id","payload","existingCartItem","updataTotalAmount","amount","price","updatesItem","updateItem","concat","CartProvider","props","showCart","setShowCart","stateCart","dispatcCart","onAddItemToCartHandler","onRemoveItemToCartHandler","onShowCartHandler","onHideCartHandler","children"],"sources":["X:/kalBanan/udemy/projects/ORDER__FOOD__PROJECT/secon times/src/store/CartProvider.js"],"sourcesContent":["import {useState, useReducer} from 'react';\r\nimport CartContext from './cart-context';\r\n\r\n\r\nconst cartValue = {\r\n  items:[],\r\n  totalAmount:0\r\n}\r\nconst cartReducer = (state, action) => {\r\n\r\n\r\n  if (action.type === 'ADD') {\r\n\r\n    const existingCartItemIndex = state.items.findindex( item => item.id === action.payload.id)\r\n    const existingCartItem = state.items[existingCartItemIndex];\r\n    \r\n    const updataTotalAmount = state.totalAmount  + \r\n                 action.payload.amount * action.payload.price;\r\n\r\n    let updatesItem;\r\n    if (existingCartItem) {\r\n      let updateItem = {\r\n        ...existingCartItem,\r\n        amount:existingCartItem.amount + action.payload.amount\r\n      }\r\n      updatesItem = [...state.items];\r\n      updatesItem[existingCartItemIndex] = updateItem;\r\n\r\n    }\r\n    else {\r\n      updatesItem.concat(action.payload)\r\n    }\r\n\r\n    return {\r\n      items:updatesItem,\r\n      \r\n    }\r\n\r\n\r\n  }\r\n\r\n  if (action.type === 'Remove') {\r\n    \r\n\r\n  }\r\n\r\n  return{cartValue}\r\n\r\n\r\n}\r\n\r\nconst CartProvider = (props) => {\r\n  const [showCart, setShowCart] = useState(false)\r\n  const [stateCart, dispatcCart] = \r\n                      useReducer(cartReducer, cartValue)\r\n \r\n  const onAddItemToCartHandler = (items) => {\r\n    dispatcCart({type:'ADD', payload:items})\r\n  }\r\n\r\n  const onRemoveItemToCartHandler = (id) => {\r\n    dispatcCart({type:'Remove', id:id})\r\n  }\r\n\r\n  const onShowCartHandler = () => {\r\n    setShowCart(true)\r\n  }\r\n\r\n  const onHideCartHandler = () => {\r\n    setShowCart(false)\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n  return <CartContext.Provider value={{\r\n\r\n  }}>\r\n    {props.children}\r\n  </CartContext.Provider>\r\n\r\n}\r\n\r\nexport default CartProvider;\r\n\r\n// const cartValue = {\r\n//   items:[],\r\n//   totalAmount:0\r\n// }\r\n\r\n// const cartReducer = ( state, action ) => {\r\n\r\n//   if ( action.type === 'ADD' ) {\r\n//     const updataTotalAmount = state.totalAmount + action.item.price * action.item.amount;\r\n   \r\n//     const existingCartItemIndex = state.items.findIndex( item => item.id === action.item.id )\r\n//     const existingCartItem = state.items[existingCartItemIndex]\r\n\r\n//     let updateItems;\r\n\r\n//     if(existingCartItem){\r\n\r\n//       const updateItem ={\r\n//         ...existingCartItem,\r\n//         amount: existingCartItem.amount + action.item.amount\r\n//       }\r\n//       updateItems = [...state.items];\r\n//       updateItems[existingCartItemIndex] = updateItem\r\n//     } \r\n//     else{\r\n//       updateItems = state.items.concat(action.item)\r\n//     }\r\n\r\n//   return {\r\n//     items: updateItems,\r\n//     totalAmount: updataTotalAmount\r\n//   };\r\n\r\n//   }\r\n  \r\n//   if ( action.type === 'REMOVE' ) {\r\n\r\n//     const existingCartItemIndex = state.items.findIndex(item => item.id === action.id)\r\n\r\n//     const existingCartItem = state.items[existingCartItemIndex];\r\n\r\n//     const updataTotalAmount = state.totalAmount - existingCartItem.price ;\r\n\r\n//     let updateItems;\r\n//     if ( existingCartItem.amount === 1 ) {\r\n//       updateItems = state.items.filter( item => item.id !== action.id )\r\n//     }\r\n\r\n//     else{\r\n\r\n//       const updateItem = {\r\n//         ...existingCartItem,\r\n//         amount:existingCartItem.amount-1\r\n//       }\r\n\r\n//       updateItems = [...state.items];\r\n//       updateItems[existingCartItemIndex] = updateItem\r\n//     }\r\n\r\n//     return {\r\n//       totalAmount:updataTotalAmount,\r\n//       items:updateItems\r\n//     }\r\n//   }\r\n\r\n//   return {cartValue}\r\n// }\r\n// const CartProvider = (props) => {\r\n  \r\n//    const [showCart, setShowCart] = useState(false);\r\n \r\n//    const [cartState, dispatchCart] = useReducer(cartReducer, cartValue)\r\n \r\n//    const addItemToCartHandler = (items) => {\r\n//      dispatchCart({type:'ADD', item:items});\r\n//   }\r\n  \r\n//   const removeItemToCartHandler = (id) => {\r\n//      dispatchCart({type: 'REMOVE', id:id})\r\n//  }\r\n \r\n//   const onShowCartHandler = () => {\r\n//     setShowCart(true)\r\n//   }\r\n \r\n//   const onHideCartHandler = () => {\r\n//     setShowCart(false)\r\n//   }\r\n \r\n//   return <CartContext.Provider value={{\r\n//    cartItem: cartState.items,\r\n//    totalAmount: cartState.totalAmount,\r\n//    showCart: showCart,\r\n//    onAddItem: addItemToCartHandler,\r\n//    onRemoveItem: removeItemToCartHandler,\r\n//    onShowCart: onShowCartHandler,\r\n//    onHideCart: onHideCartHandler,\r\n//   }}>\r\n//    {props.children}\r\n//   </CartContext.Provider> }\r\n \r\n// export default CartProvider;"],"mappings":"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"},"metadata":{},"sourceType":"module"}